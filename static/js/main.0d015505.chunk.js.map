{"version":3,"sources":["components/counter.js","store/actions/countAction.js","App.js","serviceWorker.js","store/reducers/countReducer.js","index.js"],"names":["connect","state","count","dispatch","incrementCount","type","decrementCount","props","className","onClick","App","Boolean","window","location","hostname","match","newCount","initialState","reducer","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qNA6BeA,G,MAAAA,aAbS,SAAAC,GACpB,MAAO,CACHC,MAAQD,EAAMC,UAIG,SAAAC,GACrB,MAAO,CACHC,eAAiB,WAAOD,ECpBrB,CACHE,KALiB,eDyBjBC,eAAiB,WAAOH,ECfrB,CACHE,KAViB,kBD4BVL,EAxBC,SAACO,GACb,OACI,yBAAKC,UAAU,yBACX,uCACA,4BAAKD,EAAML,OACX,4BAAQM,UAAU,+CAA+CC,QAAS,WAAQF,EAAMH,mBAAxF,aACA,4BAAQI,UAAU,yCAAyCC,QAAS,WAAQF,EAAMD,mBAAlF,kBECGI,MARf,WACE,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,QCKcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICZFC,E,OAJEC,EAAe,CACjBf,MAAQ,GAwBGgB,EAnBC,WAAmC,IAAlCjB,EAAiC,uDAAzBgB,EAAcE,EAAW,uCAC9C,OAAOA,EAAOd,MACV,IHViB,YGYb,OADAW,EAAWf,EAAMC,MAAQ,EAClB,2BACAD,GADP,IAEIC,MAAQc,IAEhB,IHfiB,YGiBb,OADAA,EAAWf,EAAMC,MAAQ,EAClB,2BACAD,GADP,IAEIC,MAAQc,IAEhB,QACI,OAAOf,ICZbmB,G,MAAmBR,OAAOS,sCAAwCC,KAElEC,EAAQC,YAAYN,EAAQE,KAElCK,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAOA,GAAO,kBAAC,EAAD,OAAmBI,SAASC,eAAe,SFoH7E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0d015505.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { increment, decrement } from '../store/actions/countAction';\n\nconst Counter = (props) => {\n    return(\n        <div className=\"container text-center\">\n            <h1>Counter</h1>\n            <h1>{props.count}</h1>\n            <button className=\"btn btn-outline-warning d-block mx-auto mb-3\" onClick={() => { props.incrementCount() }}>Increment</button>\n            <button className=\"btn btn-outline-danger d-block mx-auto\" onClick={() => { props.decrementCount() }}>Decrement</button>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        count : state.count\n    };\n}\n\nconst mapActionToProps = dispatch => {\n    return {\n        incrementCount : () => {dispatch(increment())},\n        decrementCount : () => {dispatch(decrement())}\n    };\n}\n\nexport default connect(mapStateToProps,mapActionToProps)(Counter);","export const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\n\nexport const increment = () => {\n    return {\n        type : INCREMENT\n    }\n}\n\nexport const decrement = () => {\n    return {\n        type : DECREMENT\n    }\n}","import React from 'react';\n\nimport Counter from './components/counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { INCREMENT, DECREMENT } from '../actions/countAction';\n\nconst initialState = {\n    count : 0\n}\n\nlet newCount;\n\nconst reducer = (state = initialState, action) => {\n    switch(action.type) {\n        case INCREMENT :\n            newCount = state.count + 1;\n            return {\n                ...state,\n                count : newCount\n            }\n        case DECREMENT :\n            newCount = state.count - 1;\n            return {\n                ...state,\n                count : newCount\n            }\n        default : \n            return state;\n    }\n}\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, compose } from 'redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducers/countReducer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer,composeEnhancers());\n\nReactDOM.render(<Provider store={store}><App /></Provider>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}